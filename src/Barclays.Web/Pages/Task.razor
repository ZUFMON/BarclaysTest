@page "/taskList"

@using Barclays.Localization
@using Barclays.Tasks
@using Blazorise
@using Blazorise.DataGrid
@using Microsoft.AspNetCore.Components
@using Volo.Abp.Application.Dtos
@using Microsoft.Extensions.Localization
@using Volo.Abp

@inject IStringLocalizer<BarclaysResource> L;

@inherits Volo.Abp.BlazoriseUI.AbpCrudPageBase<Barclays.IServices.ITaskListAppService,Barclays.Tasks.TaskDto, int, PagedAndSortedResultRequestDto, Barclays.Tasks.CreateUpdateTaskDto>

<Card>
    <CardHeader>
        <Row Class="justify-content-between">
            <Column ColumnSize="ColumnSize.IsAuto">
                <h2>@L["Name"]</h2>
            </Column>
            <Column ColumnSize="ColumnSize.IsAuto">
                @if (HasCreatePermission)
                {
                    <Button Color="Color.Primary"
                            Clicked="OpenCreateModalAsync">
                        @L["Priority"]
                    </Button>
                }
            </Column>
        </Row>
    </CardHeader>
    <CardBody>
        <DataGrid TItem="TaskDto"
                  Data="Entities"
                  ReadData="OnDataGridReadAsync"
                  CurrentPage="CurrentPage"
                  TotalItems="TotalCount"
                  ShowPager="true"
                  PageSize="PageSize">
            <DataGridColumns>
                <DataGridEntityActionsColumn TItem="TaskDto">
                    <DisplayTemplate>
                        <EntityActions TItem="TaskDto" EntityActionsColumn="@EntityActionsColumn">
                            <EntityAction TItem="TaskDto"
                                          Text="@L["Edit"]"
                                          Visible=HasUpdatePermission   
                                          Clicked="() => OpenEditModalAsync(context)" />
                            <EntityAction TItem="TaskDto"
                                          Text="@L["Delete"]"
                                          Visible=HasDeletePermission
                                          Clicked="() => DeleteEntityAsync(context)"
                                          ConfirmationMessage="()=>GetDeleteConfirmationMessage(context)" />
                        </EntityActions>
                    </DisplayTemplate>
                </DataGridEntityActionsColumn>
                <DataGridColumn TItem="TaskDto"
                                Field="@nameof(TaskDto.Name)"
                                Caption="@L["Name"]"></DataGridColumn>
                <DataGridColumn TItem="TaskDto"
                                Field="@nameof(TaskDto.Priority)"
                                Caption="@L["Priority"]"></DataGridColumn>
                <DataGridColumn TItem="TaskDto"
                                Field="@nameof(TaskDto.Status)"
                                Caption="@L["Status"]">
                    <DisplayTemplate>
                        
                    </DisplayTemplate>
                </DataGridColumn>

            </DataGridColumns>
        </DataGrid>
    </CardBody>
</Card>

<Modal @ref="@CreateModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>NewTask</ModalTitle>
                <CloseButton Clicked="CloseCreateModalAsync" />
            </ModalHeader>
            <ModalBody>
                <Field>
                        <FieldLabel>Status</FieldLabel>
                    <Select TValue="TaskList.TaskStatus" @bind-SelectedValue="@NewEntity.Status">
                            @foreach (int taskTypeValue in Enum.GetValues(typeof(TaskList.TaskStatus)))
                            {
                                <SelectItem TValue="TaskList.TaskStatus" Value="@((TaskList.TaskStatus) taskTypeValue)">
                                    @L[$"Enum:BookType.{taskTypeValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                   
                    <Field>
                        <FieldLabel>@L["Priority"]</FieldLabel>
                        <NumericEdit TValue="int" @bind-Value="NewEntity.Priority" />
                    </Field>
              
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseCreateModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="CreateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

<Modal @ref="@EditModal">
    <ModalBackdrop />
    <ModalContent IsCentered="true">
        <Form>
            <ModalHeader>
                <ModalTitle>@EditingEntity.Name</ModalTitle>
                <CloseButton Clicked="CloseEditModalAsync" />
            </ModalHeader>
            <ModalBody>
              
                    <Field>
                        <FieldLabel>@L["Type"]</FieldLabel>
                        <Select TValue="TaskList.TaskStatus" @bind-SelectedValue="@EditingEntity.Status">
                        @foreach (int bookTypeValue in Enum.GetValues(typeof(TaskList.TaskStatus)))
                            {
                            <SelectItem TValue="TaskList.TaskStatus" Value="@((TaskList.TaskStatus) bookTypeValue)">
                                    @L[$"Enum:BookType.{bookTypeValue}"]
                                </SelectItem>
                            }
                        </Select>
                    </Field>
                   
                    <Field>
                        <FieldLabel>@L["Priority"]</FieldLabel>
                        <NumericEdit TValue="int" @bind-Value="EditingEntity.Priority" />
                    </Field>
               
            </ModalBody>
            <ModalFooter>
                <Button Color="Color.Secondary"
                        Clicked="CloseEditModalAsync">
                    @L["Cancel"]
                </Button>
                <Button Color="Color.Primary"
                        Type="@ButtonType.Submit"
                        PreventDefaultOnSubmit="true"
                        Clicked="UpdateEntityAsync">
                    @L["Save"]
                </Button>
            </ModalFooter>
        </Form>
    </ModalContent>
</Modal>

@code
{
    IReadOnlyList<TaskDto> taskList = Array.Empty<TaskDto>();

    protected override async System.Threading.Tasks.Task OnInitializedAsync()
    {
        await base.OnInitializedAsync();
        taskList = (await AppService.GetListAsync(new PagedAndSortedResultRequestDto())).Items;
    }
    
    protected override async System.Threading.Tasks.Task OpenCreateModalAsync()
    {
        if (!taskList.Any())
        {
            throw new UserFriendlyException(message: L["AnAuthorIsRequiredForCreatingBook"]);
        }
        
        await base.OpenCreateModalAsync();
        NewEntity.Id = taskList.First().Id;
    }
}